#!/bin/bash
########################################################################
#
#
#                       script: option-system
#                   adapted by: Dan Purgert    
#                  original by: Two_Dogs
#                      version: 0.1
#                         date: Thu Apr 21 07:22:01 EDT 2016
#                      purpose: Create a logfile of system's sound
#                             : settings that will allow the linux
#                             : mint community members to assist 
#                             : the individual running it.
#
#                      license: GPL v2 (only)
#                   repository: http://github.com/dpurgert
#              Two_Dogs source: http://github.com/two-dogs
#
#
########################################################################

if [ "$1" = "-h" ]; then
   echo "   option-sound
   -------------

   This script will gather sound related information which may 
   help the community troubleshoot the problem you are having.

   Options:
     -h    Print this help, and exit.
     -v    Verbose Mode.  Print to stdout and logfile

   USAGE:
     option-sound 

   ROOT COMMANDS:
     If allowed, this script will update both inxi and the pci id  
     file at /usr/share/misc/pci.ids, as well as unloading / reloading
     the sound drivers via alsa.  The script can be successfully
     run without updating these, but some output may be less clear 
     than if the updates are allowed.

   ------------- "

   exit 0
fi

exec 6>/dev/null 
if [ "$1" = "-v" ]; then
   #verbose   
   exec 6>&1
fi

# ask user if they want to execute root commands.
if [[ $EUID -ne 0 ]]; then
   echo "This script requires root permissions to update"
   echo "inxi and the pci id list, as well as reload alsa. "
   
   read -n 1 -p "Execute these commands as root? [Y/n]" "chk"
   if [ "$chk" = "n" ] || [ "$chk" = "N" ]; then 
      #exit, user answered no
      printf "\n\nNOT updating inxi or pci IDs, or reloading system\n"
      printf "sound drivers.  If you would like more information\n"
      printf "about what these do, run with the -h option.\n"
      update="false"
      read -n1 -p "Continue anyway? [Y/n]" "chk"
      if [ "$chk" = "n" ] || [ "$chk" = "N" ]; then 
         printf "\nExiting\n"
         exit 0
      else
         printf "\nContinuing without update ...\n"
      fi 
   else
      printf "\nUpdating inxi and PCI IDs ... \n\n" 
      sudo inxi -U >&6 2>&1
      sudo update-pciids >&6 2>&1
      printf "Re-loading sound drivers ... \n\n"
      sudo alsa force-reload >&6 2>&1
      printf "\nRoot commands complete."
      printf "\nProgram will continue running as user: $USER.\n\n"
      update="true"
   fi
else
   printf "\n\n===================WARNING!!!====================\n"
   printf "Detected script being run as root user.  It is not\n"
   printf "advisable to do so, as any errors in this script,\n"
   printf "or in the commands that do not require elevated\n"
   printf "privileges can potentially harm your system.\n\n"
   printf "This script is designed to only elevate your user\n"
   printf "priveleges for the command(s) that require it, and\n"
   printf "then drop back to your standard user.\n\n"
   printf "Exiting.\n"
   exit 1
fi


if [ "$1" != "-v" ]; then
   printf "\nQuiet Mode: Final notification until program completes."
   printf "\nDo not press any keys until prompted.\n"
fi

( 
  printf "--OPTION SOUND/AUDIO--\n"
  date 
  if [ "$update" = "true" ]; then
    printf "\n--ALSA RELOADED--\n"
  else
    printf "\n--ALSA NOT RELOADED--\n"
  fi
  printf "\n--INXI BEGIN--\n"
  inxi -c0 -MSGAxx 
  printf "\n--INXI END--\n\n--LSMOD BEGIN--\n"
  lsmod | grep -Ei 'snd|hda' 
  printf "\n--LSMOD END--\n\n--CHECK INSTALLED SOUND CARDS--\n"
  cat /proc/asound/cards 
  printf "\n--SOUND CARD CHECK END--\n\n--DMESG START--\n"
  dmesg | grep -Ei 'sound|snd|hda' 
  printf "\n--DMESG END--\n\n--CHECK RUNNING PROCESSES--\n"
  ps aux | grep -Ei 'pulse|rtkit' 
  printf "\n--PROCESS CHECK COMPLETE--\n\n"
  date 
) | tee ~/option-sound.log >&6 2>&1

printf "\n\n============================\n"
printf "COMPLETED! A copy has been saved to:\n"
printf "   $HOME/option-sound.log\n"
printf "============================\n\n"

read -n1 -p "Share file to pastebin? [y|N]" "chk"

if [ "$chk" = "y" ] || [ "$chk" = "y" ];  then
   printf "\nProvide the following link to your helper:\n"
   echo "$(pastebin < ~/option-sound.log)"
else
   printf "\nLogfile NOT uploaded to pastebin.\n"
   printf "Ask the person assisting you where to send it.\n"
fi

read -n1 -p "Remove the logfile? [y|N]" "chk"
if [ "$chk" = "y" ] || [ "$chk" = "Y" ];  then
   rm $HOME/option-sound.log
   printf "\nLogfile removed.\n"
else
   printf "\nLogfile $HOME/option-sound.log retained.\n"
fi
