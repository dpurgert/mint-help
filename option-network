#!/bin/bash
########################################################################
#
#
#                       script: option-network
#                   adapted by: Dan Purgert    
#                  original by: Two_Dogs
#                      version: 0.1
#                         date: Sat Apr 23 13:12:36 EDT 2016
#                      purpose: Create a logfile of general network
#                             : settings that will allow the linux
#                             : mint community members to assist 
#                             : the individual running it.
#
#                      license: GPL v2 (only)
#                   repository: http://github.com/dpurgert
#              Two_Dogs source: http://github.com/two-dogs
#
#
########################################################################



if [ "$1" = "-h" ]; then
   printf "\n   option-network
   -------------

   This script will gather system related information which may 
   help the community troubleshoot the problem you are having.

   Options:
     -h    Print this help, and exit.
     -v    Verbose Mode.  Print to stdout and logfile

   USAGE:
     option-system 

   ------------- "

   exit 0
fi

exec 6>/dev/null 
if [ "$1" = "-v" ]; then
   #verbose   
   exec 6>&1
fi

upt=$(uptime | cut -d\  -f4-6 | cut -d, -f1,2)
day=$(printf "$upt" | cut -d\  -f1)
hr=$(printf "$upt" | cut -d\  -f3 | cut -d\: -f1)

if [ "$day" -gt 0 ] || [ "$hr" -gt 2]; then 
   printf "\n\n===========NOTE==============\n"
   printf "Computer has been running for: $upt."
   printf "If your problem is recent, it may be fixed simply by\n"
   printf "rebooting the PC.  Also, if you control the router / modem\n"
   printf "reboot them too."
  
   read -n1 -p "Continue anyway? [Y/n]" "chk"
   if [ "$chk" = "n" ] || [ "$chk" = "N" ]; then
      printf "\nExiting\n"
      exit 0
   else
      printf "\nContinuing without reboot.\n"
   fi
fi

# forbid execution by root.
if [[ $EUID -eq 0 ]] ; then
   printf "\n\n===================WARNING!!!====================\n"
   printf "Detected script being run as root user.  It is not\n"
   printf "advisable to do so, as any errors in this script,\n"
   printf "or in the commands that do not require elevated\n"
   printf "privileges can potentially harm your system.\n\n"
   printf "This script is designed to only elevate your user\n"
   printf "priveleges for the command(s) that require it, and\n"
   printf "then drop back to your standard user.\n\n"
   printf "Exiting.\n"
   exit 1
fi


(
 date 
 printf"\n--OPT NETWORK--\n\n--INXI START--\n"
 inxi -c0 -z -MSIpNnxx 
 printf"\n--INXI END--\n\n--DKMS STATUS START--\n"
 dkms status 
 printf "\n--DKMS STATUS END--\n\n--RFKILL START--\n"
 rfkill list 
 printf "\n--RFKILL END--\n\n--NMCLI START--\n"
 printf "\nNetworkManager\'s status:\n"
 nmcli -m tabular nm  
  
 printf"\n\nNetworkManager\'s connections:\n"  
 nmcli -m tabular c  
 printf "\n\nDevices managed by NetworkManager:\n"
 nmcli -m tabular d  
 printf "\n--NMCLI END--\n\n--MINTWIFI START--\n"
 mintwifi 
 printf "\n--MINTWIFI END--\n\n--NDISWRAPPER LIST START--\n"
 ndiswrapper -l 
 printf "\n--NDISWRAPPER LIST END--\n\n--LSMOD START--\n"
 lsmod | grep -Ei 'blue|ath1|wifi|ndis|80211|hid' 
 printf "\n--LSMOD END--\n\n--HCICONFIG START--\n"
 hciconfig -a 
 printf "\n--HCICONFIG END--\n\n--SEARCH PS NM/BLUE START--\n"
 ps aux | grep -Ei 'blue|smb|nmbd|winbind|network|dnsmasq' 
 printf "\n--SEARCH PS NM/BLUE END--\n\n--DMESG START--\n"
 dmesg | grep -Ei 'error|fail|dkms|blue|wifi|net:|hid|tcp|udp|eth|wlan|ipv|80211|ath1|dns' 
 printf "\n--DMESG END--\n"
 date
) | tee ~/option-network.log >&6 2>&1

printf "\n\n============================\n"
printf "COMPLETED! A copy has been saved to:\n"
printf "   $HOME/option-network.log\n"
printf "============================\n\n"

read -n1 -p "Share file to pastebin? [y|N]" "chk"

if [ "$chk" = "y" ] || [ "$chk" = "y" ];  then
   printf "\nProvide the following link to your helper:\n"
   printf "\n$(pastebin < ~/option-network.log)\n"
else
   printf "\nLogfile NOT uploaded to pastebin.\n"
   printf "Ask the person assisting you where to send it.\n"
fi

read -n1 -p "Remove the logfile? [y|N]" "chk"
if [ "$chk" = "y" ] || [ "$chk" = "Y" ];  then
   rm $HOME/option-network.log
   printf "\nLogfile removed.\n"
else
   printf "\nLogfile $HOME/option-network.log retained.\n"
fi
